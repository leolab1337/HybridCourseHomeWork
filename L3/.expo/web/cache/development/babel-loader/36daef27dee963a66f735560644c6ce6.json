{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Accelerometer } from 'expo-sensors';\nimport React, { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction OrientationComponent() {\n  var _useState = useState({\n    x: 0,\n    y: 0,\n    z: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  Accelerometer.setUpdateInterval(1000);\n  useEffect(function () {\n    var subcription = Accelerometer.addListener(function (orientantionData) {\n      return setData(orientantionData);\n    });\n    return function () {\n      return subcription.remove();\n    };\n  }, []);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Orientation\"\n    }), _jsxs(Text, {\n      children: [\"X:\", data.x]\n    }), _jsxs(Text, {\n      children: [\"Y:\", data.y]\n    }), _jsxs(Text, {\n      children: [\"Z:\", data.z]\n    })]\n  });\n}\n\nexport default function App() {\n  var windowWidth = Dimensions.get(\"window\").width;\n  var windowHeight = Dimensions.get('window').height;\n  var sensorsSupported = Platform.OS === 'andoid' ? true : false;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Welcome\"\n    }), _jsxs(Text, {\n      children: [\"Width:\", windowWidth, \" \"]\n    }), _jsxs(Text, {\n      children: [\"Height: \", windowHeight]\n    }), _jsx(OrientationComponent, {}), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/leoha/Desktop/HybridCourseHomeWork-main/L3/App.js"],"names":["StatusBar","Accelerometer","React","useEffect","useState","OrientationComponent","x","y","z","data","setData","setUpdateInterval","subcription","addListener","orientantionData","remove","App","windowWidth","Dimensions","get","width","windowHeight","height","sensorsSupported","Platform","OS","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;;;AAGA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAGA,SAASC,oBAAT,GAAgC;AAC9B,kBAAwBD,QAAQ,CAAC;AAAEE,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE;AAAjB,GAAD,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACAT,EAAAA,aAAa,CAACU,iBAAd,CAAgC,IAAhC;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,WAAW,GAAGX,aAAa,CAACY,WAAd,CAA0B,UAAAC,gBAAgB;AAAA,aAAIJ,OAAO,CAACI,gBAAD,CAAX;AAAA,KAA1C,CAApB;AACA,WAAO;AAAA,aAAMF,WAAW,CAACG,MAAZ,EAAN;AAAA,KAAP;AACD,GAHQ,EAGN,EAHM,CAAT;AAIA,SAAQ,MAAC,IAAD;AAAA,eACN,KAAC,IAAD;AAAA;AAAA,MADM,EAEN,MAAC,IAAD;AAAA,uBAASN,IAAI,CAACH,CAAd;AAAA,MAFM,EAGN,MAAC,IAAD;AAAA,uBAASG,IAAI,CAACF,CAAd;AAAA,MAHM,EAIN,MAAC,IAAD;AAAA,uBAASE,IAAI,CAACD,CAAd;AAAA,MAJM;AAAA,IAAR;AAOD;;AAED,eAAe,SAASQ,GAAT,GAAe;AAC5B,MAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C;AACA,MAAMC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C;AACA,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,EAAT,KAAgB,QAAhB,GAA2B,IAA3B,GAAkC,KAA3D;AACA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAA;AAAA,MADF,EAEE,MAAC,IAAD;AAAA,2BAAaV,WAAb;AAAA,MAFF,EAGE,MAAC,IAAD;AAAA,6BAAeI,YAAf;AAAA,MAHF,EAIE,KAAC,oBAAD,KAJF,EAKE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MALF;AAAA,IADF;AASD;AAED,IAAMK,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\nimport { Dimensions } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\nimport React, { useEffect, useState } from 'react';\n\n\nfunction OrientationComponent() {\n  const [data, setData] = useState({ x: 0, y: 0, z: 0 });\n  Accelerometer.setUpdateInterval(1000);\n  useEffect(() => {\n    const subcription = Accelerometer.addListener(orientantionData => setData(orientantionData))\n    return () => subcription.remove()\n  }, [])\n  return (<View>\n    <Text>Orientation</Text>\n    <Text>X:{data.x}</Text>\n    <Text>Y:{data.y}</Text>\n    <Text>Z:{data.z}</Text>\n  </View>\n  )\n}\n\nexport default function App() {\n  const windowWidth = Dimensions.get(\"window\").width;\n  const windowHeight = Dimensions.get('window').height;\n  const sensorsSupported = Platform.OS === 'andoid' ? true : false\n  return (\n    <View style={styles.container}>\n      <Text>Welcome</Text>\n      <Text>Width:{windowWidth} </Text>\n      <Text>Height: {windowHeight}</Text>\n      <OrientationComponent></OrientationComponent>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}